{"ast":null,"code":"var _jsxFileName = \"E:\\\\React Js\\\\hbapp\\\\src\\\\Components\\\\ShowElementOnClick.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ShowElementOnClick = () => {\n  _s();\n  // State to track whether the element is visible or not\n  const [isElementVisible, setElementVisibility] = useState(false);\n\n  // Function to toggle the visibility of the element\n  const toggleElement = () => {\n    setElementVisibility(!isElementVisible);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      margin: '4.3rem 1rem'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: toggleElement,\n      children: isElementVisible ? 'Hide Element' : 'Show Element'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }, this), isElementVisible && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"This is the element that will be shown or hidden.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 5\n  }, this);\n};\n_s(ShowElementOnClick, \"dvmwXg8l4ysjflMDlVngXqGY/RQ=\");\n_c = ShowElementOnClick;\nexport default ShowElementOnClick;\nvar _c;\n$RefreshReg$(_c, \"ShowElementOnClick\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","ShowElementOnClick","_s","isElementVisible","setElementVisibility","toggleElement","style","margin","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["E:/React Js/hbapp/src/Components/ShowElementOnClick.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\n\r\nconst ShowElementOnClick = () => {\r\n  // State to track whether the element is visible or not\r\n  const [isElementVisible, setElementVisibility] = useState(false);\r\n\r\n  // Function to toggle the visibility of the element\r\n  const toggleElement = () => {\r\n    setElementVisibility(!isElementVisible);\r\n  };\r\n\r\n  return (\r\n    <div style={{ margin: '4.3rem 1rem' }}>\r\n      {/* Button to toggle the visibility of the element */}\r\n      <button onClick={toggleElement}>\r\n        {isElementVisible ? 'Hide Element' : 'Show Element'}\r\n      </button>\r\n\r\n      {/* Element that is conditionally rendered based on state */}\r\n      {isElementVisible && (\r\n        <div>\r\n          <p>This is the element that will be shown or hidden.</p>\r\n          {/* Add more content for the element here */}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ShowElementOnClick;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,MAAMC,kBAAkB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC/B;EACA,MAAM,CAACC,gBAAgB,EAAEC,oBAAoB,CAAC,GAAGN,QAAQ,CAAC,KAAK,CAAC;;EAEhE;EACA,MAAMO,aAAa,GAAGA,CAAA,KAAM;IAC1BD,oBAAoB,CAAC,CAACD,gBAAgB,CAAC;EACzC,CAAC;EAED,oBACEH,OAAA;IAAKM,KAAK,EAAE;MAAEC,MAAM,EAAE;IAAc,CAAE;IAAAC,QAAA,gBAEpCR,OAAA;MAAQS,OAAO,EAAEJ,aAAc;MAAAG,QAAA,EAC5BL,gBAAgB,GAAG,cAAc,GAAG;IAAc;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC7C,CAAC,EAGRV,gBAAgB,iBACfH,OAAA;MAAAQ,QAAA,eACER,OAAA;QAAAQ,QAAA,EAAG;MAAiD;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAErD,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACX,EAAA,CAzBID,kBAAkB;AAAAa,EAAA,GAAlBb,kBAAkB;AA2BxB,eAAeA,kBAAkB;AAAC,IAAAa,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}