{"ast":null,"code":"var _jsxFileName = \"E:\\\\React Js\\\\hbapp\\\\src\\\\Components\\\\Time.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SimpleCaptcha = () => {\n  _s();\n  const [userInput, setUserInput] = useState('');\n  const [captchaText, setCaptchaText] = useState(generateCaptcha());\n  const [isCaptchaValid, setIsCaptchaValid] = useState(false);\n  function generateCaptcha() {\n    // Generate a random string for the CAPTCHA\n    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    let captcha = '';\n    for (let i = 0; i < 6; i++) {\n      captcha += characters.charAt(Math.floor(Math.random() * characters.length));\n    }\n    return captcha;\n  }\n  const handleChange = event => {\n    setUserInput(event.target.value);\n  };\n  const handleRefresh = () => {\n    // Regenerate the CAPTCHA text\n    setCaptchaText(generateCaptcha());\n    // Clear user input\n    setUserInput('');\n    // Reset validation status\n    setIsCaptchaValid(false);\n  };\n  const handleSubmit = () => {\n    // Check if the user input matches the CAPTCHA text\n    setIsCaptchaValid(userInput === captchaText);\n\n    // Your form submission logic goes here\n    if (userInput === captchaText) {\n      console.log('Form submitted successfully!');\n      // Add your form submission logic here\n    } else {\n      console.log('CAPTCHA validation failed. Please try again.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {},\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: captchaText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: handleRefresh,\n        children: \"Refresh\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"captchaInput\",\n        children: \"Enter CAPTCHA: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"captchaInput\",\n        value: userInput,\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), isCaptchaValid ? /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        color: 'green'\n      },\n      children: \"CAPTCHA is valid!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        color: 'red'\n      },\n      children: \"CAPTCHA validation failed.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      onClick: handleSubmit,\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n_s(SimpleCaptcha, \"pdHlXclS7cKl/QWQzSAjmUpZn00=\");\n_c = SimpleCaptcha;\nexport default SimpleCaptcha;\nvar _c;\n$RefreshReg$(_c, \"SimpleCaptcha\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","SimpleCaptcha","_s","userInput","setUserInput","captchaText","setCaptchaText","generateCaptcha","isCaptchaValid","setIsCaptchaValid","characters","captcha","i","charAt","Math","floor","random","length","handleChange","event","target","value","handleRefresh","handleSubmit","console","log","style","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onClick","htmlFor","id","onChange","color","_c","$RefreshReg$"],"sources":["E:/React Js/hbapp/src/Components/Time.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\n\r\nconst SimpleCaptcha = () => {\r\n  const [userInput, setUserInput] = useState('');\r\n  const [captchaText, setCaptchaText] = useState(generateCaptcha());\r\n  const [isCaptchaValid, setIsCaptchaValid] = useState(false);\r\n\r\n  function generateCaptcha() {\r\n    // Generate a random string for the CAPTCHA\r\n    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n    let captcha = '';\r\n    for (let i = 0; i < 6; i++) {\r\n      captcha += characters.charAt(Math.floor(Math.random() * characters.length));\r\n    }\r\n    return captcha;\r\n  }\r\n\r\n  const handleChange = (event) => {\r\n    setUserInput(event.target.value);\r\n  };\r\n\r\n  const handleRefresh = () => {\r\n    // Regenerate the CAPTCHA text\r\n    setCaptchaText(generateCaptcha());\r\n    // Clear user input\r\n    setUserInput('');\r\n    // Reset validation status\r\n    setIsCaptchaValid(false);\r\n  };\r\n\r\n  const handleSubmit = () => {\r\n    // Check if the user input matches the CAPTCHA text\r\n    setIsCaptchaValid(userInput === captchaText);\r\n\r\n    // Your form submission logic goes here\r\n    if (userInput === captchaText) {\r\n      console.log('Form submitted successfully!');\r\n      // Add your form submission logic here\r\n    } else {\r\n      console.log('CAPTCHA validation failed. Please try again.');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div style={{}}>\r\n      {/* CAPTCHA display */}\r\n      <div>\r\n        <span>{captchaText}</span>\r\n        <button type=\"button\" onClick={handleRefresh}>\r\n          Refresh\r\n        </button>\r\n      </div>\r\n\r\n      {/* User input */}\r\n      <div>\r\n        <label htmlFor=\"captchaInput\">Enter CAPTCHA: </label>\r\n        <input\r\n          type=\"text\"\r\n          id=\"captchaInput\"\r\n          value={userInput}\r\n          onChange={handleChange}\r\n        />\r\n      </div>\r\n\r\n      {/* Validation message */}\r\n      {isCaptchaValid ? (\r\n        <div style={{ color: 'green' }}>CAPTCHA is valid!</div>\r\n      ) : (\r\n        <div style={{ color: 'red' }}>CAPTCHA validation failed.</div>\r\n      )}\r\n\r\n      {/* Submit button */}\r\n      <button type=\"button\" onClick={handleSubmit}>\r\n        Submit\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SimpleCaptcha;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}